void SlowUpdateExample()
{
  403350:	41 55                	push   %r13
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  403352:	31 c0                	xor    %eax,%eax
  403354:	31 f6                	xor    %esi,%esi
  403356:	41 54                	push   %r12
  403358:	55                   	push   %rbp
  403359:	53                   	push   %rbx
  40335a:	bb 90 01 00 00       	mov    $0x190,%ebx
  40335f:	48 83 ec 78          	sub    $0x78,%rsp

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  403363:	48 8b 2d 96 23 00 00 	mov    0x2396(%rip),%rbp        # 405700 <_ZN16entity_lerp_slow4typeE>
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
	  && (__detail::__mod<_UIntType, __m>(__s) == 0))
	_M_x = 1;
      else
	_M_x = __detail::__mod<_UIntType, __m>(__s);
  40336a:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  403371:	00 00 
  403373:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  40337a:	00 00 
  40337c:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  403383:	00 00 
  403385:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  40338c:	00 00 
  40338e:	eb 16                	jmp    4033a6 <_Z17SlowUpdateExamplev+0x56>
  403390:	48 85 f6             	test   %rsi,%rsi
  403393:	74 03                	je     403398 <_Z17SlowUpdateExamplev+0x48>
  403395:	48 89 2e             	mov    %rbp,(%rsi)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  403398:	48 83 c6 08          	add    $0x8,%rsi
	uniform_real_distribution<float> distribution(0, 1);

	int number_of_lerp = 400;
	int number_of_hermite = 1000;
	vector<long long> create_types;
	for (int i = 0; i < number_of_lerp; i++)
  40339c:	83 eb 01             	sub    $0x1,%ebx
  40339f:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  4033a4:	74 23                	je     4033c9 <_Z17SlowUpdateExamplev+0x79>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4033a6:	48 39 c6             	cmp    %rax,%rsi
  4033a9:	75 e5                	jne    403390 <_Z17SlowUpdateExamplev+0x40>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  4033ab:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  4033b0:	be 00 57 40 00       	mov    $0x405700,%esi
  4033b5:	e8 46 18 00 00       	callq  404c00 <_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIIRKxEEEvDpOT_>
  4033ba:	83 eb 01             	sub    $0x1,%ebx
  4033bd:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  4033c2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4033c7:	75 dd                	jne    4033a6 <_Z17SlowUpdateExamplev+0x56>
  4033c9:	bb e8 03 00 00       	mov    $0x3e8,%ebx
  4033ce:	48 8b 2d 3b 24 00 00 	mov    0x243b(%rip),%rbp        # 405810 <_ZN14entity_hermite4typeE>
  4033d5:	eb 24                	jmp    4033fb <_Z17SlowUpdateExamplev+0xab>
  4033d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4033de:	00 00 
  4033e0:	48 85 f6             	test   %rsi,%rsi
  4033e3:	74 03                	je     4033e8 <_Z17SlowUpdateExamplev+0x98>
  4033e5:	48 89 2e             	mov    %rbp,(%rsi)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  4033e8:	48 83 c6 08          	add    $0x8,%rsi
	{
		create_types.emplace_back(entity_lerp_slow::type);
	}
	for (int i = 0; i < number_of_hermite; i++)
  4033ec:	83 eb 01             	sub    $0x1,%ebx
  4033ef:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  4033f4:	74 23                	je     403419 <_Z17SlowUpdateExamplev+0xc9>
  4033f6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4033fb:	48 39 c6             	cmp    %rax,%rsi
  4033fe:	75 e0                	jne    4033e0 <_Z17SlowUpdateExamplev+0x90>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  403400:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  403405:	be 10 58 40 00       	mov    $0x405810,%esi
  40340a:	e8 f1 17 00 00       	callq  404c00 <_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIIRKxEEEvDpOT_>
  40340f:	83 eb 01             	sub    $0x1,%ebx
  403412:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  403417:	75 dd                	jne    4033f6 <_Z17SlowUpdateExamplev+0xa6>
	{
		create_types.emplace_back(entity_hermite::type);
	}

	shuffle(create_types.begin(), create_types.end(), generator);
  403419:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40341e:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  403423:	e8 b8 1b 00 00       	callq  404fe0 <_ZSt7shuffleIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEERSt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEvT_SA_OT0_>
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
  403428:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
  40342d:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  403432:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  403439:	00 00 
  40343b:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403442:	00 00 
  403444:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  40344b:	00 00 

	vector<unique_ptr<entity>> entity_vec;
	for (auto &create_type : create_types)
  40344d:	4c 39 e3             	cmp    %r12,%rbx
  403450:	0f 84 81 03 00 00    	je     4037d7 <_Z17SlowUpdateExamplev+0x487>
  403456:	0f 57 db             	xorps  %xmm3,%xmm3
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
	  if (__m)
	    __res %= __m;
  403459:	48 bd 05 00 00 00 02 	movabs $0x200000005,%rbp
  403460:	00 00 00 
  403463:	f3 0f 11 5c 24 0c    	movss  %xmm3,0xc(%rsp)
  403469:	e9 06 01 00 00       	jmpq   403574 <_Z17SlowUpdateExamplev+0x224>
  40346e:	66 90                	xchg   %ax,%ax
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403470:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  403475:	48 69 f0 a7 41 00 00 	imul   $0x41a7,%rax,%rsi
	  if (__m)
	    __res %= __m;
  40347c:	48 89 f0             	mov    %rsi,%rax
  40347f:	48 f7 e5             	mul    %rbp
  403482:	48 89 f0             	mov    %rsi,%rax
  403485:	48 29 d0             	sub    %rdx,%rax
  403488:	48 d1 e8             	shr    %rax
  40348b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40348f:	48 c1 e9 1e          	shr    $0x1e,%rcx
  403493:	48 89 c8             	mov    %rcx,%rax
  403496:	48 c1 e0 1f          	shl    $0x1f,%rax
  40349a:	48 29 c8             	sub    %rcx,%rax
  40349d:	48 89 f1             	mov    %rsi,%rcx
  4034a0:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  4034a3:	48 69 f1 a7 41 00 00 	imul   $0x41a7,%rcx,%rsi
	  if (__m)
	    __res %= __m;
  4034aa:	48 89 f0             	mov    %rsi,%rax
  4034ad:	48 f7 e5             	mul    %rbp
  4034b0:	48 89 f0             	mov    %rsi,%rax
  4034b3:	48 29 d0             	sub    %rdx,%rax
  4034b6:	48 d1 e8             	shr    %rax
  4034b9:	48 01 c2             	add    %rax,%rdx
  4034bc:	48 c1 ea 1e          	shr    $0x1e,%rdx
  4034c0:	48 89 d0             	mov    %rdx,%rax
  4034c3:	48 c1 e0 1f          	shl    $0x1f,%rax
  4034c7:	48 29 d0             	sub    %rdx,%rax
  4034ca:	48 89 f2             	mov    %rsi,%rdx
  4034cd:	48 29 c2             	sub    %rax,%rdx
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  4034d0:	48 83 e9 01          	sub    $0x1,%rcx
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
  4034d4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  4034d9:	0f 88 51 02 00 00    	js     403730 <_Z17SlowUpdateExamplev+0x3e0>
  4034df:	f3 48 0f 2a c9       	cvtsi2ss %rcx,%xmm1
  4034e4:	f3 0f 10 64 24 0c    	movss  0xc(%rsp),%xmm4
  4034ea:	48 83 ea 01          	sub    $0x1,%rdx
  4034ee:	f3 0f 58 cc          	addss  %xmm4,%xmm1
	  __tmp *= __r;
	}
      return __sum / __tmp;
  4034f2:	f3 0f 59 0d d2 23 00 	mulss  0x23d2(%rip),%xmm1        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  4034f9:	00 
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
  4034fa:	f3 0f 58 cc          	addss  %xmm4,%xmm1
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  4034fe:	0f 88 0c 02 00 00    	js     403710 <_Z17SlowUpdateExamplev+0x3c0>
  403504:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  403509:	f3 0f 10 6c 24 0c    	movss  0xc(%rsp),%xmm5
  40350f:	f3 0f 58 c5          	addss  %xmm5,%xmm0
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403513:	f3 0f 59 05 b1 23 00 	mulss  0x23b1(%rip),%xmm0        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  40351a:	00 
  40351b:	f3 0f 58 c5          	addss  %xmm5,%xmm0
			unique_ptr<entity> a(create_entity_hermite(distribution(generator), distribution(generator), distribution(generator), distribution(generator)));
			entity_vec.emplace_back(std::move(a));
		}
		else
		{
			unique_ptr<entity> a(create_entity_lerp_slow(distribution(generator), distribution(generator)));
  40351f:	e8 dc f8 ff ff       	callq  402e00 <_Z23create_entity_lerp_slowff>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  403524:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  403529:	48 3b 54 24 60       	cmp    0x60(%rsp),%rdx
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  40352e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  403533:	0f 84 87 02 00 00    	je     4037c0 <_Z17SlowUpdateExamplev+0x470>
  403539:	48 85 d2             	test   %rdx,%rdx
  40353c:	0f 84 0e 02 00 00    	je     403750 <_Z17SlowUpdateExamplev+0x400>
      // Modifiers.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
  403542:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  403549:	00 00 
  40354b:	48 89 02             	mov    %rax,(%rdx)
  40354e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  403553:	48 83 c2 08          	add    $0x8,%rdx
  403557:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)

      // Destructor.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
  40355c:	48 85 ff             	test   %rdi,%rdi
  40355f:	74 06                	je     403567 <_Z17SlowUpdateExamplev+0x217>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
  403561:	48 8b 07             	mov    (%rdi),%rax
  403564:	ff 50 18             	callq  *0x18(%rax)
  403567:	48 83 c3 08          	add    $0x8,%rbx
	}

	shuffle(create_types.begin(), create_types.end(), generator);

	vector<unique_ptr<entity>> entity_vec;
	for (auto &create_type : create_types)
  40356b:	49 39 dc             	cmp    %rbx,%r12
  40356e:	0f 84 6c 02 00 00    	je     4037e0 <_Z17SlowUpdateExamplev+0x490>
	{
		if (create_type == entity_hermite::type)
  403574:	48 8b 05 95 22 00 00 	mov    0x2295(%rip),%rax        # 405810 <_ZN14entity_hermite4typeE>
  40357b:	48 39 03             	cmp    %rax,(%rbx)
  40357e:	0f 85 ec fe ff ff    	jne    403470 <_Z17SlowUpdateExamplev+0x120>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403584:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  403589:	48 69 ca a7 41 00 00 	imul   $0x41a7,%rdx,%rcx
	  if (__m)
	    __res %= __m;
  403590:	48 89 c8             	mov    %rcx,%rax
  403593:	48 f7 e5             	mul    %rbp
  403596:	48 89 c8             	mov    %rcx,%rax
  403599:	48 29 d0             	sub    %rdx,%rax
  40359c:	48 d1 e8             	shr    %rax
  40359f:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
  4035a3:	48 c1 ef 1e          	shr    $0x1e,%rdi
  4035a7:	48 89 f8             	mov    %rdi,%rax
  4035aa:	48 c1 e0 1f          	shl    $0x1f,%rax
  4035ae:	48 29 f8             	sub    %rdi,%rax
  4035b1:	48 29 c1             	sub    %rax,%rcx
  4035b4:	48 89 cf             	mov    %rcx,%rdi
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  4035b7:	48 69 c9 a7 41 00 00 	imul   $0x41a7,%rcx,%rcx
	  if (__m)
	    __res %= __m;
  4035be:	48 89 c8             	mov    %rcx,%rax
  4035c1:	48 f7 e5             	mul    %rbp
  4035c4:	48 89 c8             	mov    %rcx,%rax
  4035c7:	48 29 d0             	sub    %rdx,%rax
  4035ca:	48 d1 e8             	shr    %rax
  4035cd:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  4035d1:	48 c1 ee 1e          	shr    $0x1e,%rsi
  4035d5:	48 89 f0             	mov    %rsi,%rax
  4035d8:	48 c1 e0 1f          	shl    $0x1f,%rax
  4035dc:	48 29 f0             	sub    %rsi,%rax
  4035df:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  4035e2:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
	  if (__m)
	    __res %= __m;
  4035e9:	48 89 ce             	mov    %rcx,%rsi
  4035ec:	4c 89 c0             	mov    %r8,%rax
  4035ef:	48 f7 e5             	mul    %rbp
  4035f2:	4c 89 c0             	mov    %r8,%rax
  4035f5:	48 29 d0             	sub    %rdx,%rax
  4035f8:	48 d1 e8             	shr    %rax
  4035fb:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4035ff:	48 c1 e9 1e          	shr    $0x1e,%rcx
  403603:	48 89 c8             	mov    %rcx,%rax
  403606:	48 c1 e0 1f          	shl    $0x1f,%rax
  40360a:	48 29 c8             	sub    %rcx,%rax
  40360d:	4c 89 c1             	mov    %r8,%rcx
  403610:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403613:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
	  if (__m)
	    __res %= __m;
  40361a:	4c 89 c0             	mov    %r8,%rax
  40361d:	48 f7 e5             	mul    %rbp
  403620:	4c 89 c0             	mov    %r8,%rax
  403623:	48 29 d0             	sub    %rdx,%rax
  403626:	48 d1 e8             	shr    %rax
  403629:	48 01 c2             	add    %rax,%rdx
  40362c:	48 c1 ea 1e          	shr    $0x1e,%rdx
  403630:	48 89 d0             	mov    %rdx,%rax
  403633:	48 c1 e0 1f          	shl    $0x1f,%rax
  403637:	48 29 d0             	sub    %rdx,%rax
  40363a:	4c 89 c2             	mov    %r8,%rdx
  40363d:	48 29 c2             	sub    %rax,%rdx
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403640:	48 83 ef 01          	sub    $0x1,%rdi
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
  403644:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  403649:	0f 88 23 01 00 00    	js     403772 <_Z17SlowUpdateExamplev+0x422>
  40364f:	f3 48 0f 2a df       	cvtsi2ss %rdi,%xmm3
  403654:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  40365a:	48 83 ee 01          	sub    $0x1,%rsi
  40365e:	f3 0f 58 df          	addss  %xmm7,%xmm3
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403662:	f3 0f 59 1d 62 22 00 	mulss  0x2262(%rip),%xmm3        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403669:	00 
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
  40366a:	f3 0f 58 df          	addss  %xmm7,%xmm3
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  40366e:	0f 88 32 01 00 00    	js     4037a6 <_Z17SlowUpdateExamplev+0x456>
  403674:	f3 48 0f 2a d6       	cvtsi2ss %rsi,%xmm2
  403679:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  40367f:	48 83 e9 01          	sub    $0x1,%rcx
  403683:	f3 0f 58 d7          	addss  %xmm7,%xmm2
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403687:	f3 0f 59 15 3d 22 00 	mulss  0x223d(%rip),%xmm2        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  40368e:	00 
  40368f:	f3 0f 58 d7          	addss  %xmm7,%xmm2
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403693:	0f 88 f3 00 00 00    	js     40378c <_Z17SlowUpdateExamplev+0x43c>
  403699:	f3 48 0f 2a c9       	cvtsi2ss %rcx,%xmm1
  40369e:	f3 0f 10 74 24 0c    	movss  0xc(%rsp),%xmm6
  4036a4:	48 83 ea 01          	sub    $0x1,%rdx
  4036a8:	f3 0f 58 ce          	addss  %xmm6,%xmm1
	  __tmp *= __r;
	}
      return __sum / __tmp;
  4036ac:	f3 0f 59 0d 18 22 00 	mulss  0x2218(%rip),%xmm1        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  4036b3:	00 
  4036b4:	f3 0f 58 ce          	addss  %xmm6,%xmm1
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  4036b8:	0f 88 9a 00 00 00    	js     403758 <_Z17SlowUpdateExamplev+0x408>
  4036be:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  4036c3:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  4036c9:	f3 0f 58 c7          	addss  %xmm7,%xmm0
	  __tmp *= __r;
	}
      return __sum / __tmp;
  4036cd:	f3 0f 59 05 f7 21 00 	mulss  0x21f7(%rip),%xmm0        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  4036d4:	00 
  4036d5:	f3 0f 58 c7          	addss  %xmm7,%xmm0
		{
			unique_ptr<entity> a(create_entity_hermite(distribution(generator), distribution(generator), distribution(generator), distribution(generator)));
  4036d9:	e8 f2 fa ff ff       	callq  4031d0 <_Z21create_entity_hermiteffff>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4036de:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  4036e3:	48 3b 54 24 60       	cmp    0x60(%rsp),%rdx
  4036e8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4036ed:	0f 85 46 fe ff ff    	jne    403539 <_Z17SlowUpdateExamplev+0x1e9>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  4036f3:	4c 8d 6c 24 50       	lea    0x50(%rsp),%r13
  4036f8:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4036fd:	4c 89 ef             	mov    %r13,%rdi
  403700:	e8 bb 1a 00 00       	callq  4051c0 <_ZNSt6vectorISt10unique_ptrI6entitySt14default_deleteIS1_EESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_>
  403705:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40370a:	e9 4d fe ff ff       	jmpq   40355c <_Z17SlowUpdateExamplev+0x20c>
  40370f:	90                   	nop
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403710:	48 89 d0             	mov    %rdx,%rax
  403713:	83 e2 01             	and    $0x1,%edx
  403716:	48 d1 e8             	shr    %rax
  403719:	48 09 d0             	or     %rdx,%rax
  40371c:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  403721:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  403725:	e9 df fd ff ff       	jmpq   403509 <_Z17SlowUpdateExamplev+0x1b9>
  40372a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403730:	48 89 c8             	mov    %rcx,%rax
  403733:	83 e1 01             	and    $0x1,%ecx
  403736:	48 d1 e8             	shr    %rax
  403739:	48 09 c8             	or     %rcx,%rax
  40373c:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
  403741:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  403745:	e9 9a fd ff ff       	jmpq   4034e4 <_Z17SlowUpdateExamplev+0x194>
  40374a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403750:	48 89 c7             	mov    %rax,%rdi
  403753:	e9 fb fd ff ff       	jmpq   403553 <_Z17SlowUpdateExamplev+0x203>
  403758:	48 89 d0             	mov    %rdx,%rax
  40375b:	83 e2 01             	and    $0x1,%edx
  40375e:	48 d1 e8             	shr    %rax
  403761:	48 09 d0             	or     %rdx,%rax
  403764:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  403769:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  40376d:	e9 51 ff ff ff       	jmpq   4036c3 <_Z17SlowUpdateExamplev+0x373>
  403772:	48 89 f8             	mov    %rdi,%rax
  403775:	83 e7 01             	and    $0x1,%edi
  403778:	48 d1 e8             	shr    %rax
  40377b:	48 09 f8             	or     %rdi,%rax
  40377e:	f3 48 0f 2a d8       	cvtsi2ss %rax,%xmm3
  403783:	f3 0f 58 db          	addss  %xmm3,%xmm3
  403787:	e9 c8 fe ff ff       	jmpq   403654 <_Z17SlowUpdateExamplev+0x304>
  40378c:	48 89 c8             	mov    %rcx,%rax
  40378f:	83 e1 01             	and    $0x1,%ecx
  403792:	48 d1 e8             	shr    %rax
  403795:	48 09 c8             	or     %rcx,%rax
  403798:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
  40379d:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  4037a1:	e9 f8 fe ff ff       	jmpq   40369e <_Z17SlowUpdateExamplev+0x34e>
  4037a6:	48 89 f0             	mov    %rsi,%rax
  4037a9:	83 e6 01             	and    $0x1,%esi
  4037ac:	48 d1 e8             	shr    %rax
  4037af:	48 09 f0             	or     %rsi,%rax
  4037b2:	f3 48 0f 2a d0       	cvtsi2ss %rax,%xmm2
  4037b7:	f3 0f 58 d2          	addss  %xmm2,%xmm2
  4037bb:	e9 b9 fe ff ff       	jmpq   403679 <_Z17SlowUpdateExamplev+0x329>
  4037c0:	4c 8d 6c 24 50       	lea    0x50(%rsp),%r13
  4037c5:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4037ca:	4c 89 ef             	mov    %r13,%rdi
  4037cd:	e8 ee 19 00 00       	callq  4051c0 <_ZNSt6vectorISt10unique_ptrI6entitySt14default_deleteIS1_EESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_>
  4037d2:	e9 2e ff ff ff       	jmpq   403705 <_Z17SlowUpdateExamplev+0x3b5>
  4037d7:	0f 57 d2             	xorps  %xmm2,%xmm2
  4037da:	f3 0f 11 54 24 0c    	movss  %xmm2,0xc(%rsp)
public:
	std::chrono::time_point<std::chrono::high_resolution_clock> m_start;
	std::chrono::time_point<std::chrono::high_resolution_clock> m_end;
	mytimer()
	{
		m_start = std::chrono::high_resolution_clock::now();
  4037e0:	e8 ab ed ff ff       	callq  402590 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
  4037e5:	41 bc 14 00 00 00    	mov    $0x14,%r12d
  4037eb:	49 89 c5             	mov    %rax,%r13
  4037ee:	66 90                	xchg   %ax,%ax
  4037f0:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
  4037f5:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx

	{
		// change styles for document 
		mytimer timer;
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
			for (auto &a : entity_vec) {
  4037fa:	48 39 eb             	cmp    %rbp,%rbx
  4037fd:	74 18                	je     403817 <_Z17SlowUpdateExamplev+0x4c7>
  4037ff:	90                   	nop
	return get();
      }

      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
  403800:	48 8b 3b             	mov    (%rbx),%rdi
				// slow version each object has a virtual update.
				a->Update(t);
  403803:	f3 0f 10 44 24 0c    	movss  0xc(%rsp),%xmm0
  403809:	48 8b 17             	mov    (%rdi),%rdx
  40380c:	ff 12                	callq  *(%rdx)
  40380e:	48 83 c3 08          	add    $0x8,%rbx

	{
		// change styles for document 
		mytimer timer;
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
			for (auto &a : entity_vec) {
  403812:	48 39 dd             	cmp    %rbx,%rbp
  403815:	75 e9                	jne    403800 <_Z17SlowUpdateExamplev+0x4b0>
	}

	{
		// change styles for document 
		mytimer timer;
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
  403817:	f3 0f 10 35 a9 20 00 	movss  0x20a9(%rip),%xmm6        # 4058c8 <_ZN14entity_hermite4typeE+0xb8>
  40381e:	00 
  40381f:	41 83 ec 01          	sub    $0x1,%r12d
  403823:	f3 0f 58 74 24 0c    	addss  0xc(%rsp),%xmm6
  403829:	f3 0f 11 74 24 0c    	movss  %xmm6,0xc(%rsp)
  40382f:	75 bf                	jne    4037f0 <_Z17SlowUpdateExamplev+0x4a0>
	{
		m_start = std::chrono::high_resolution_clock::now();
	}
	std::chrono::duration<double> stop()
	{
		m_end = std::chrono::high_resolution_clock::now();
  403831:	e8 5a ed ff ff       	callq  402590 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  403836:	4c 29 e8             	sub    %r13,%rax
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
  403839:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40383e:	48 8b 05 e3 3a 20 00 	mov    0x203ae3(%rip),%rax        # 607328 <gSlowSimpleUpdateExampleTimers+0x8>
  403845:	48 3b 05 e4 3a 20 00 	cmp    0x203ae4(%rip),%rax        # 607330 <gSlowSimpleUpdateExampleTimers+0x10>
  40384c:	f2 0f 5e 05 6c 20 00 	divsd  0x206c(%rip),%xmm0        # 4058c0 <_ZN14entity_hermite4typeE+0xb0>
  403853:	00 
			for (auto &a : entity_vec) {
				// slow version each object has a virtual update.
				a->Update(t);
			}
		}
		gSlowSimpleUpdateExampleTimers.emplace_back(timer.stop());
  403854:	f2 0f 11 44 24 20    	movsd  %xmm0,0x20(%rsp)
  40385a:	74 7b                	je     4038d7 <_Z17SlowUpdateExamplev+0x587>
  40385c:	48 85 c0             	test   %rax,%rax
  40385f:	74 0c                	je     40386d <_Z17SlowUpdateExamplev+0x51d>
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
  403861:	f2 0f 59 05 4f 20 00 	mulsd  0x204f(%rip),%xmm0        # 4058b8 <_ZN14entity_hermite4typeE+0xa8>
  403868:	00 
	template<typename _Rep2, typename _Period2, typename = typename
	       enable_if<treat_as_floating_point<rep>::value
			 || (ratio_divide<_Period2, period>::den == 1
			     && !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
	  : __r(duration_cast<duration>(__d).count()) { }
  403869:	f2 0f 11 00          	movsd  %xmm0,(%rax)
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  40386d:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
  403872:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  403877:	48 83 c0 08          	add    $0x8,%rax
  40387b:	48 89 05 a6 3a 20 00 	mov    %rax,0x203aa6(%rip)        # 607328 <gSlowSimpleUpdateExampleTimers+0x8>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  403882:	48 39 dd             	cmp    %rbx,%rbp
  403885:	74 6e                	je     4038f5 <_Z17SlowUpdateExamplev+0x5a5>
  403887:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40388e:	00 00 

      // Destructor.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
  403890:	48 8b 3b             	mov    (%rbx),%rdi
  403893:	48 85 ff             	test   %rdi,%rdi
  403896:	74 06                	je     40389e <_Z17SlowUpdateExamplev+0x54e>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
  403898:	48 8b 07             	mov    (%rdi),%rax
  40389b:	ff 50 18             	callq  *0x18(%rax)
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
  40389e:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  4038a5:	48 83 c3 08          	add    $0x8,%rbx
  4038a9:	48 39 dd             	cmp    %rbx,%rbp
  4038ac:	75 e2                	jne    403890 <_Z17SlowUpdateExamplev+0x540>
  4038ae:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
  4038b3:	48 85 ff             	test   %rdi,%rdi
  4038b6:	74 05                	je     4038bd <_Z17SlowUpdateExamplev+0x56d>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
  4038b8:	e8 93 ec ff ff       	callq  402550 <_ZdlPv@plt>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  4038bd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
  4038c2:	48 85 ff             	test   %rdi,%rdi
  4038c5:	74 05                	je     4038cc <_Z17SlowUpdateExamplev+0x57c>
  4038c7:	e8 84 ec ff ff       	callq  402550 <_ZdlPv@plt>
	}
}

