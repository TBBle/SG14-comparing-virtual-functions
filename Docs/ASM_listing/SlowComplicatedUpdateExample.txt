void SlowComplicatedUpdateExample()
{
  404560:	41 55                	push   %r13
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  404562:	31 d2                	xor    %edx,%edx
  404564:	31 c0                	xor    %eax,%eax
  404566:	41 54                	push   %r12
  404568:	55                   	push   %rbp
  404569:	53                   	push   %rbx
  40456a:	bb 90 01 00 00       	mov    $0x190,%ebx
  40456f:	48 83 ec 78          	sub    $0x78,%rsp

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  404573:	48 8b 2d 7e 11 00 00 	mov    0x117e(%rip),%rbp        # 4056f8 <_ZN16entity_lerp_fast4typeE>
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
	  && (__detail::__mod<_UIntType, __m>(__s) == 0))
	_M_x = 1;
      else
	_M_x = __detail::__mod<_UIntType, __m>(__s);
  40457a:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  404581:	00 00 
  404583:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  40458a:	00 00 
  40458c:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  404593:	00 00 
  404595:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  40459c:	00 00 
  40459e:	eb 16                	jmp    4045b6 <_Z28SlowComplicatedUpdateExamplev+0x56>
  4045a0:	48 85 c0             	test   %rax,%rax
  4045a3:	74 03                	je     4045a8 <_Z28SlowComplicatedUpdateExamplev+0x48>
  4045a5:	48 89 28             	mov    %rbp,(%rax)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  4045a8:	48 83 c0 08          	add    $0x8,%rax
	uniform_real_distribution<float> distribution(0, 1);

	int number_of_lerp = 400;
	int number_of_hermite = 1000;
	vector<long long> create_types;
	for (int i = 0; i < number_of_lerp; i++)
  4045ac:	83 eb 01             	sub    $0x1,%ebx
  4045af:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4045b4:	74 23                	je     4045d9 <_Z28SlowComplicatedUpdateExamplev+0x79>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4045b6:	48 39 d0             	cmp    %rdx,%rax
  4045b9:	75 e5                	jne    4045a0 <_Z28SlowComplicatedUpdateExamplev+0x40>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  4045bb:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  4045c0:	be f8 56 40 00       	mov    $0x4056f8,%esi
  4045c5:	e8 36 06 00 00       	callq  404c00 <_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIIRKxEEEvDpOT_>
  4045ca:	83 eb 01             	sub    $0x1,%ebx
  4045cd:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4045d2:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  4045d7:	75 dd                	jne    4045b6 <_Z28SlowComplicatedUpdateExamplev+0x56>
  4045d9:	bb e8 03 00 00       	mov    $0x3e8,%ebx
  4045de:	48 8b 2d 2b 12 00 00 	mov    0x122b(%rip),%rbp        # 405810 <_ZN14entity_hermite4typeE>
  4045e5:	eb 2a                	jmp    404611 <_Z28SlowComplicatedUpdateExamplev+0xb1>
  4045e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4045ee:	00 00 
  4045f0:	48 85 c0             	test   %rax,%rax
  4045f3:	74 03                	je     4045f8 <_Z28SlowComplicatedUpdateExamplev+0x98>
  4045f5:	48 89 28             	mov    %rbp,(%rax)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  4045f8:	48 83 c0 08          	add    $0x8,%rax
	{
		create_types.emplace_back(entity_lerp_fast::type);
	}
	for (int i = 0; i < number_of_hermite; i++)
  4045fc:	83 eb 01             	sub    $0x1,%ebx
  4045ff:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  404604:	48 89 c6             	mov    %rax,%rsi
  404607:	74 26                	je     40462f <_Z28SlowComplicatedUpdateExamplev+0xcf>
  404609:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  40460e:	48 89 f0             	mov    %rsi,%rax
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  404611:	48 39 d0             	cmp    %rdx,%rax
  404614:	75 da                	jne    4045f0 <_Z28SlowComplicatedUpdateExamplev+0x90>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  404616:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  40461b:	be 10 58 40 00       	mov    $0x405810,%esi
  404620:	e8 db 05 00 00       	callq  404c00 <_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIIRKxEEEvDpOT_>
  404625:	83 eb 01             	sub    $0x1,%ebx
  404628:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40462d:	75 da                	jne    404609 <_Z28SlowComplicatedUpdateExamplev+0xa9>
	{
		create_types.emplace_back(entity_hermite::type);
	}

	shuffle(create_types.begin(), create_types.end(), generator);
  40462f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  404634:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  404639:	e8 a2 09 00 00       	callq  404fe0 <_ZSt7shuffleIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEERSt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEvT_SA_OT0_>
  40463e:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
  404643:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  404648:	0f 57 d2             	xorps  %xmm2,%xmm2
  40464b:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  404652:	00 00 
  404654:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  40465b:	00 00 
  40465d:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  404664:	00 00 

	vector<unique_ptr<entity>> entity_vec;
	for (auto &create_type : create_types)
  404666:	4c 39 e3             	cmp    %r12,%rbx
  404669:	f3 0f 11 54 24 0c    	movss  %xmm2,0xc(%rsp)
  40466f:	0f 84 7c 03 00 00    	je     4049f1 <_Z28SlowComplicatedUpdateExamplev+0x491>
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
	  if (__m)
	    __res %= __m;
  404675:	48 bd 05 00 00 00 02 	movabs $0x200000005,%rbp
  40467c:	00 00 00 
  40467f:	e9 08 01 00 00       	jmpq   40478c <_Z28SlowComplicatedUpdateExamplev+0x22c>
  404684:	0f 1f 40 00          	nopl   0x0(%rax)
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  404688:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40468d:	48 69 f0 a7 41 00 00 	imul   $0x41a7,%rax,%rsi
	  if (__m)
	    __res %= __m;
  404694:	48 89 f0             	mov    %rsi,%rax
  404697:	48 f7 e5             	mul    %rbp
  40469a:	48 89 f0             	mov    %rsi,%rax
  40469d:	48 29 d0             	sub    %rdx,%rax
  4046a0:	48 d1 e8             	shr    %rax
  4046a3:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4046a7:	48 c1 e9 1e          	shr    $0x1e,%rcx
  4046ab:	48 89 c8             	mov    %rcx,%rax
  4046ae:	48 c1 e0 1f          	shl    $0x1f,%rax
  4046b2:	48 29 c8             	sub    %rcx,%rax
  4046b5:	48 89 f1             	mov    %rsi,%rcx
  4046b8:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  4046bb:	48 69 f1 a7 41 00 00 	imul   $0x41a7,%rcx,%rsi
	  if (__m)
	    __res %= __m;
  4046c2:	48 89 f0             	mov    %rsi,%rax
  4046c5:	48 f7 e5             	mul    %rbp
  4046c8:	48 89 f0             	mov    %rsi,%rax
  4046cb:	48 29 d0             	sub    %rdx,%rax
  4046ce:	48 d1 e8             	shr    %rax
  4046d1:	48 01 c2             	add    %rax,%rdx
  4046d4:	48 c1 ea 1e          	shr    $0x1e,%rdx
  4046d8:	48 89 d0             	mov    %rdx,%rax
  4046db:	48 c1 e0 1f          	shl    $0x1f,%rax
  4046df:	48 29 d0             	sub    %rdx,%rax
  4046e2:	48 29 c6             	sub    %rax,%rsi
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  4046e5:	48 83 e9 01          	sub    $0x1,%rcx
  4046e9:	48 89 f2             	mov    %rsi,%rdx
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
  4046ec:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4046f1:	0f 88 59 02 00 00    	js     404950 <_Z28SlowComplicatedUpdateExamplev+0x3f0>
  4046f7:	f3 48 0f 2a c9       	cvtsi2ss %rcx,%xmm1
  4046fc:	f3 0f 10 64 24 0c    	movss  0xc(%rsp),%xmm4
  404702:	48 83 ea 01          	sub    $0x1,%rdx
  404706:	f3 0f 58 cc          	addss  %xmm4,%xmm1
	  __tmp *= __r;
	}
      return __sum / __tmp;
  40470a:	f3 0f 59 0d ba 11 00 	mulss  0x11ba(%rip),%xmm1        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  404711:	00 
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
  404712:	f3 0f 58 cc          	addss  %xmm4,%xmm1
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  404716:	0f 88 14 02 00 00    	js     404930 <_Z28SlowComplicatedUpdateExamplev+0x3d0>
  40471c:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  404721:	f3 0f 10 6c 24 0c    	movss  0xc(%rsp),%xmm5
  404727:	f3 0f 58 c5          	addss  %xmm5,%xmm0
	  __tmp *= __r;
	}
      return __sum / __tmp;
  40472b:	f3 0f 59 05 99 11 00 	mulss  0x1199(%rip),%xmm0        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  404732:	00 
  404733:	f3 0f 58 c5          	addss  %xmm5,%xmm0
			unique_ptr<entity> a(create_entity_hermite(distribution(generator), distribution(generator), distribution(generator), distribution(generator)));
			entity_vec.emplace_back(std::move(a));
		}
		else
		{
			unique_ptr<entity> a(create_entity_lerp_fast(distribution(generator), distribution(generator)));
  404737:	e8 84 e7 ff ff       	callq  402ec0 <_Z23create_entity_lerp_fastff>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40473c:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  404741:	48 3b 54 24 60       	cmp    0x60(%rsp),%rdx
  404746:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  40474b:	0f 84 89 02 00 00    	je     4049da <_Z28SlowComplicatedUpdateExamplev+0x47a>
  404751:	48 85 d2             	test   %rdx,%rdx
  404754:	0f 84 10 02 00 00    	je     40496a <_Z28SlowComplicatedUpdateExamplev+0x40a>
      // Modifiers.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
  40475a:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  404761:	00 00 
  404763:	48 89 02             	mov    %rax,(%rdx)
  404766:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  40476b:	48 83 c2 08          	add    $0x8,%rdx
  40476f:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)

      // Destructor.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
  404774:	48 85 ff             	test   %rdi,%rdi
  404777:	74 06                	je     40477f <_Z28SlowComplicatedUpdateExamplev+0x21f>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
  404779:	48 8b 07             	mov    (%rdi),%rax
  40477c:	ff 50 18             	callq  *0x18(%rax)
  40477f:	48 83 c3 08          	add    $0x8,%rbx
	}

	shuffle(create_types.begin(), create_types.end(), generator);

	vector<unique_ptr<entity>> entity_vec;
	for (auto &create_type : create_types)
  404783:	49 39 dc             	cmp    %rbx,%r12
  404786:	0f 84 65 02 00 00    	je     4049f1 <_Z28SlowComplicatedUpdateExamplev+0x491>
	{
		if (create_type == entity_hermite::type)
  40478c:	48 8b 05 7d 10 00 00 	mov    0x107d(%rip),%rax        # 405810 <_ZN14entity_hermite4typeE>
  404793:	48 39 03             	cmp    %rax,(%rbx)
  404796:	0f 85 ec fe ff ff    	jne    404688 <_Z28SlowComplicatedUpdateExamplev+0x128>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  40479c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  4047a1:	48 69 ca a7 41 00 00 	imul   $0x41a7,%rdx,%rcx
	  if (__m)
	    __res %= __m;
  4047a8:	48 89 c8             	mov    %rcx,%rax
  4047ab:	48 f7 e5             	mul    %rbp
  4047ae:	48 89 c8             	mov    %rcx,%rax
  4047b1:	48 29 d0             	sub    %rdx,%rax
  4047b4:	48 d1 e8             	shr    %rax
  4047b7:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
  4047bb:	48 c1 ef 1e          	shr    $0x1e,%rdi
  4047bf:	48 89 f8             	mov    %rdi,%rax
  4047c2:	48 c1 e0 1f          	shl    $0x1f,%rax
  4047c6:	48 29 f8             	sub    %rdi,%rax
  4047c9:	48 29 c1             	sub    %rax,%rcx
  4047cc:	48 89 cf             	mov    %rcx,%rdi
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  4047cf:	48 69 c9 a7 41 00 00 	imul   $0x41a7,%rcx,%rcx
	  if (__m)
	    __res %= __m;
  4047d6:	48 89 c8             	mov    %rcx,%rax
  4047d9:	48 f7 e5             	mul    %rbp
  4047dc:	48 89 c8             	mov    %rcx,%rax
  4047df:	48 29 d0             	sub    %rdx,%rax
  4047e2:	48 d1 e8             	shr    %rax
  4047e5:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  4047e9:	48 c1 ee 1e          	shr    $0x1e,%rsi
  4047ed:	48 89 f0             	mov    %rsi,%rax
  4047f0:	48 c1 e0 1f          	shl    $0x1f,%rax
  4047f4:	48 29 f0             	sub    %rsi,%rax
  4047f7:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  4047fa:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
	  if (__m)
	    __res %= __m;
  404801:	48 89 ce             	mov    %rcx,%rsi
  404804:	4c 89 c0             	mov    %r8,%rax
  404807:	48 f7 e5             	mul    %rbp
  40480a:	4c 89 c0             	mov    %r8,%rax
  40480d:	48 29 d0             	sub    %rdx,%rax
  404810:	48 d1 e8             	shr    %rax
  404813:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  404817:	48 c1 e9 1e          	shr    $0x1e,%rcx
  40481b:	48 89 c8             	mov    %rcx,%rax
  40481e:	48 c1 e0 1f          	shl    $0x1f,%rax
  404822:	48 29 c8             	sub    %rcx,%rax
  404825:	4c 89 c1             	mov    %r8,%rcx
  404828:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  40482b:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
	  if (__m)
	    __res %= __m;
  404832:	4c 89 c0             	mov    %r8,%rax
  404835:	48 f7 e5             	mul    %rbp
  404838:	4c 89 c0             	mov    %r8,%rax
  40483b:	48 29 d0             	sub    %rdx,%rax
  40483e:	48 d1 e8             	shr    %rax
  404841:	48 01 c2             	add    %rax,%rdx
  404844:	48 c1 ea 1e          	shr    $0x1e,%rdx
  404848:	48 89 d0             	mov    %rdx,%rax
  40484b:	48 c1 e0 1f          	shl    $0x1f,%rax
  40484f:	48 29 d0             	sub    %rdx,%rax
  404852:	4c 89 c2             	mov    %r8,%rdx
  404855:	48 29 c2             	sub    %rax,%rdx
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  404858:	48 83 ef 01          	sub    $0x1,%rdi
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
  40485c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  404861:	0f 88 59 01 00 00    	js     4049c0 <_Z28SlowComplicatedUpdateExamplev+0x460>
  404867:	f3 48 0f 2a df       	cvtsi2ss %rdi,%xmm3
  40486c:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  404872:	48 83 ee 01          	sub    $0x1,%rsi
  404876:	f3 0f 58 df          	addss  %xmm7,%xmm3
	  __tmp *= __r;
	}
      return __sum / __tmp;
  40487a:	f3 0f 59 1d 4a 10 00 	mulss  0x104a(%rip),%xmm3        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  404881:	00 
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
  404882:	f3 0f 58 df          	addss  %xmm7,%xmm3
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  404886:	0f 88 1a 01 00 00    	js     4049a6 <_Z28SlowComplicatedUpdateExamplev+0x446>
  40488c:	f3 48 0f 2a d6       	cvtsi2ss %rsi,%xmm2
  404891:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  404897:	48 83 e9 01          	sub    $0x1,%rcx
  40489b:	f3 0f 58 d7          	addss  %xmm7,%xmm2
	  __tmp *= __r;
	}
      return __sum / __tmp;
  40489f:	f3 0f 59 15 25 10 00 	mulss  0x1025(%rip),%xmm2        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  4048a6:	00 
  4048a7:	f3 0f 58 d7          	addss  %xmm7,%xmm2
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  4048ab:	0f 88 db 00 00 00    	js     40498c <_Z28SlowComplicatedUpdateExamplev+0x42c>
  4048b1:	f3 48 0f 2a c9       	cvtsi2ss %rcx,%xmm1
  4048b6:	f3 0f 10 74 24 0c    	movss  0xc(%rsp),%xmm6
  4048bc:	48 83 ea 01          	sub    $0x1,%rdx
  4048c0:	f3 0f 58 ce          	addss  %xmm6,%xmm1
	  __tmp *= __r;
	}
      return __sum / __tmp;
  4048c4:	f3 0f 59 0d 00 10 00 	mulss  0x1000(%rip),%xmm1        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  4048cb:	00 
  4048cc:	f3 0f 58 ce          	addss  %xmm6,%xmm1
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  4048d0:	0f 88 9c 00 00 00    	js     404972 <_Z28SlowComplicatedUpdateExamplev+0x412>
  4048d6:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  4048db:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  4048e1:	f3 0f 58 c7          	addss  %xmm7,%xmm0
	  __tmp *= __r;
	}
      return __sum / __tmp;
  4048e5:	f3 0f 59 05 df 0f 00 	mulss  0xfdf(%rip),%xmm0        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  4048ec:	00 
  4048ed:	f3 0f 58 c7          	addss  %xmm7,%xmm0
		{
			unique_ptr<entity> a(create_entity_hermite(distribution(generator), distribution(generator), distribution(generator), distribution(generator)));
  4048f1:	e8 da e8 ff ff       	callq  4031d0 <_Z21create_entity_hermiteffff>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4048f6:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  4048fb:	48 3b 54 24 60       	cmp    0x60(%rsp),%rdx
  404900:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  404905:	0f 85 46 fe ff ff    	jne    404751 <_Z28SlowComplicatedUpdateExamplev+0x1f1>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  40490b:	4c 8d 6c 24 50       	lea    0x50(%rsp),%r13
  404910:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  404915:	4c 89 ef             	mov    %r13,%rdi
  404918:	e8 a3 08 00 00       	callq  4051c0 <_ZNSt6vectorISt10unique_ptrI6entitySt14default_deleteIS1_EESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_>
  40491d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  404922:	e9 4d fe ff ff       	jmpq   404774 <_Z28SlowComplicatedUpdateExamplev+0x214>
  404927:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40492e:	00 00 
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  404930:	48 89 d0             	mov    %rdx,%rax
  404933:	83 e2 01             	and    $0x1,%edx
  404936:	48 d1 e8             	shr    %rax
  404939:	48 09 d0             	or     %rdx,%rax
  40493c:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  404941:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  404945:	e9 d7 fd ff ff       	jmpq   404721 <_Z28SlowComplicatedUpdateExamplev+0x1c1>
  40494a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  404950:	48 89 c8             	mov    %rcx,%rax
  404953:	83 e1 01             	and    $0x1,%ecx
  404956:	48 d1 e8             	shr    %rax
  404959:	48 09 c8             	or     %rcx,%rax
  40495c:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
  404961:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  404965:	e9 92 fd ff ff       	jmpq   4046fc <_Z28SlowComplicatedUpdateExamplev+0x19c>
  40496a:	48 89 c7             	mov    %rax,%rdi
  40496d:	e9 f9 fd ff ff       	jmpq   40476b <_Z28SlowComplicatedUpdateExamplev+0x20b>
  404972:	48 89 d0             	mov    %rdx,%rax
  404975:	83 e2 01             	and    $0x1,%edx
  404978:	48 d1 e8             	shr    %rax
  40497b:	48 09 d0             	or     %rdx,%rax
  40497e:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  404983:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  404987:	e9 4f ff ff ff       	jmpq   4048db <_Z28SlowComplicatedUpdateExamplev+0x37b>
  40498c:	48 89 c8             	mov    %rcx,%rax
  40498f:	83 e1 01             	and    $0x1,%ecx
  404992:	48 d1 e8             	shr    %rax
  404995:	48 09 c8             	or     %rcx,%rax
  404998:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
  40499d:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  4049a1:	e9 10 ff ff ff       	jmpq   4048b6 <_Z28SlowComplicatedUpdateExamplev+0x356>
  4049a6:	48 89 f0             	mov    %rsi,%rax
  4049a9:	83 e6 01             	and    $0x1,%esi
  4049ac:	48 d1 e8             	shr    %rax
  4049af:	48 09 f0             	or     %rsi,%rax
  4049b2:	f3 48 0f 2a d0       	cvtsi2ss %rax,%xmm2
  4049b7:	f3 0f 58 d2          	addss  %xmm2,%xmm2
  4049bb:	e9 d1 fe ff ff       	jmpq   404891 <_Z28SlowComplicatedUpdateExamplev+0x331>
  4049c0:	48 89 f8             	mov    %rdi,%rax
  4049c3:	83 e7 01             	and    $0x1,%edi
  4049c6:	48 d1 e8             	shr    %rax
  4049c9:	48 09 f8             	or     %rdi,%rax
  4049cc:	f3 48 0f 2a d8       	cvtsi2ss %rax,%xmm3
  4049d1:	f3 0f 58 db          	addss  %xmm3,%xmm3
  4049d5:	e9 92 fe ff ff       	jmpq   40486c <_Z28SlowComplicatedUpdateExamplev+0x30c>
  4049da:	4c 8d 6c 24 50       	lea    0x50(%rsp),%r13
  4049df:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4049e4:	4c 89 ef             	mov    %r13,%rdi
  4049e7:	e8 d4 07 00 00       	callq  4051c0 <_ZNSt6vectorISt10unique_ptrI6entitySt14default_deleteIS1_EESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_>
  4049ec:	e9 2c ff ff ff       	jmpq   40491d <_Z28SlowComplicatedUpdateExamplev+0x3bd>
public:
	std::chrono::time_point<std::chrono::high_resolution_clock> m_start;
	std::chrono::time_point<std::chrono::high_resolution_clock> m_end;
	mytimer()
	{
		m_start = std::chrono::high_resolution_clock::now();
  4049f1:	e8 9a db ff ff       	callq  402590 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
  4049f6:	41 bc 14 00 00 00    	mov    $0x14,%r12d
  4049fc:	49 89 c5             	mov    %rax,%r13
  4049ff:	90                   	nop
  404a00:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
  404a05:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx

	{
		// change styles for document 
		mytimer timer;
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
			for (auto &a : entity_vec) {
  404a0a:	48 39 eb             	cmp    %rbp,%rbx
  404a0d:	74 2c                	je     404a3b <_Z28SlowComplicatedUpdateExamplev+0x4db>
  404a0f:	90                   	nop
	return get();
      }

      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
  404a10:	48 8b 3b             	mov    (%rbx),%rdi
				// if we have a fast loop for this object don't update
				// so in this case we on the hermite entity but not the lerp ones. 
				if (a->GetType() != entity_lerp_fast::type)	{
  404a13:	48 8b 17             	mov    (%rdi),%rdx
  404a16:	ff 52 08             	callq  *0x8(%rdx)
  404a19:	48 98                	cltq   
  404a1b:	48 3b 05 d6 0c 00 00 	cmp    0xcd6(%rip),%rax        # 4056f8 <_ZN16entity_lerp_fast4typeE>
  404a22:	74 0e                	je     404a32 <_Z28SlowComplicatedUpdateExamplev+0x4d2>
  404a24:	48 8b 3b             	mov    (%rbx),%rdi
					a->Update(t);
  404a27:	f3 0f 10 44 24 0c    	movss  0xc(%rsp),%xmm0
  404a2d:	48 8b 07             	mov    (%rdi),%rax
  404a30:	ff 10                	callq  *(%rax)
  404a32:	48 83 c3 08          	add    $0x8,%rbx

	{
		// change styles for document 
		mytimer timer;
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
			for (auto &a : entity_vec) {
  404a36:	48 39 dd             	cmp    %rbx,%rbp
  404a39:	75 d5                	jne    404a10 <_Z28SlowComplicatedUpdateExamplev+0x4b0>
				if (a->GetType() != entity_lerp_fast::type)	{
					a->Update(t);
				}
			}
			// fast loop with no virtual functions and maybe a different data format. 
			entity_lerp_fast::UpdateAll(t);
  404a3b:	f3 0f 10 44 24 0c    	movss  0xc(%rsp),%xmm0
  404a41:	e8 1a e3 ff ff       	callq  402d60 <_ZN16entity_lerp_fast9UpdateAllEf>


	{
		// change styles for document 
		mytimer timer;
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
  404a46:	f3 0f 10 35 7a 0e 00 	movss  0xe7a(%rip),%xmm6        # 4058c8 <_ZN14entity_hermite4typeE+0xb8>
  404a4d:	00 
  404a4e:	41 83 ec 01          	sub    $0x1,%r12d
  404a52:	f3 0f 58 74 24 0c    	addss  0xc(%rsp),%xmm6
  404a58:	f3 0f 11 74 24 0c    	movss  %xmm6,0xc(%rsp)
  404a5e:	75 a0                	jne    404a00 <_Z28SlowComplicatedUpdateExamplev+0x4a0>
	{
		m_start = std::chrono::high_resolution_clock::now();
	}
	std::chrono::duration<double> stop()
	{
		m_end = std::chrono::high_resolution_clock::now();
  404a60:	e8 2b db ff ff       	callq  402590 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  404a65:	4c 29 e8             	sub    %r13,%rax
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
  404a68:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  404a6d:	48 8b 05 94 28 20 00 	mov    0x202894(%rip),%rax        # 607308 <gSlowComplicatedUpdateExampleTimers+0x8>
  404a74:	48 3b 05 95 28 20 00 	cmp    0x202895(%rip),%rax        # 607310 <gSlowComplicatedUpdateExampleTimers+0x10>
  404a7b:	f2 0f 5e 05 3d 0e 00 	divsd  0xe3d(%rip),%xmm0        # 4058c0 <_ZN14entity_hermite4typeE+0xb0>
  404a82:	00 
				}
			}
			// fast loop with no virtual functions and maybe a different data format. 
			entity_lerp_fast::UpdateAll(t);
		}
		gSlowComplicatedUpdateExampleTimers.emplace_back(timer.stop());
  404a83:	f2 0f 11 44 24 20    	movsd  %xmm0,0x20(%rsp)
  404a89:	74 7c                	je     404b07 <_Z28SlowComplicatedUpdateExamplev+0x5a7>
  404a8b:	48 85 c0             	test   %rax,%rax
  404a8e:	74 0c                	je     404a9c <_Z28SlowComplicatedUpdateExamplev+0x53c>
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
  404a90:	f2 0f 59 05 20 0e 00 	mulsd  0xe20(%rip),%xmm0        # 4058b8 <_ZN14entity_hermite4typeE+0xa8>
  404a97:	00 
	template<typename _Rep2, typename _Period2, typename = typename
	       enable_if<treat_as_floating_point<rep>::value
			 || (ratio_divide<_Period2, period>::den == 1
			     && !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
	  : __r(duration_cast<duration>(__d).count()) { }
  404a98:	f2 0f 11 00          	movsd  %xmm0,(%rax)
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  404a9c:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
  404aa1:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  404aa6:	48 83 c0 08          	add    $0x8,%rax
  404aaa:	48 89 05 57 28 20 00 	mov    %rax,0x202857(%rip)        # 607308 <gSlowComplicatedUpdateExampleTimers+0x8>
  404ab1:	48 39 dd             	cmp    %rbx,%rbp
  404ab4:	74 6f                	je     404b25 <_Z28SlowComplicatedUpdateExamplev+0x5c5>
  404ab6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404abd:	00 00 00 

      // Destructor.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
  404ac0:	48 8b 3b             	mov    (%rbx),%rdi
  404ac3:	48 85 ff             	test   %rdi,%rdi
  404ac6:	74 06                	je     404ace <_Z28SlowComplicatedUpdateExamplev+0x56e>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
  404ac8:	48 8b 07             	mov    (%rdi),%rax
  404acb:	ff 50 18             	callq  *0x18(%rax)
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
  404ace:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  404ad5:	48 83 c3 08          	add    $0x8,%rbx
  404ad9:	48 39 dd             	cmp    %rbx,%rbp
  404adc:	75 e2                	jne    404ac0 <_Z28SlowComplicatedUpdateExamplev+0x560>
  404ade:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
  404ae3:	48 85 ff             	test   %rdi,%rdi
  404ae6:	74 05                	je     404aed <_Z28SlowComplicatedUpdateExamplev+0x58d>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
  404ae8:	e8 63 da ff ff       	callq  402550 <_ZdlPv@plt>
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  404aed:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
  404af2:	48 85 ff             	test   %rdi,%rdi
  404af5:	74 05                	je     404afc <_Z28SlowComplicatedUpdateExamplev+0x59c>
  404af7:	e8 54 da ff ff       	callq  402550 <_ZdlPv@plt>
	}
}
