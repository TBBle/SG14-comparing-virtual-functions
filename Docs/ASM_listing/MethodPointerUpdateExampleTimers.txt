#ifdef __GNUC__
void MethodPointerUpdateExampleTimers()
{
  403940:	41 55                	push   %r13
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  403942:	31 c0                	xor    %eax,%eax
  403944:	31 f6                	xor    %esi,%esi
  403946:	41 54                	push   %r12
  403948:	55                   	push   %rbp
  403949:	53                   	push   %rbx
  40394a:	bb 90 01 00 00       	mov    $0x190,%ebx
  40394f:	48 83 ec 78          	sub    $0x78,%rsp

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  403953:	48 8b 2d 9e 1d 00 00 	mov    0x1d9e(%rip),%rbp        # 4056f8 <_ZN16entity_lerp_fast4typeE>
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
	  && (__detail::__mod<_UIntType, __m>(__s) == 0))
	_M_x = 1;
      else
	_M_x = __detail::__mod<_UIntType, __m>(__s);
  40395a:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  403961:	00 00 
  403963:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  40396a:	00 00 
  40396c:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  403973:	00 00 
  403975:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  40397c:	00 00 
  40397e:	eb 16                	jmp    403996 <_Z32MethodPointerUpdateExampleTimersv+0x56>
  403980:	48 85 f6             	test   %rsi,%rsi
  403983:	74 03                	je     403988 <_Z32MethodPointerUpdateExampleTimersv+0x48>
  403985:	48 89 2e             	mov    %rbp,(%rsi)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  403988:	48 83 c6 08          	add    $0x8,%rsi
	uniform_real_distribution<float> distribution(0, 1);

	int number_of_lerp = 400;
	int number_of_hermite = 1000;
	vector<long long> create_types;
	for (int i = 0; i < number_of_lerp; i++)
  40398c:	83 eb 01             	sub    $0x1,%ebx
  40398f:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  403994:	74 23                	je     4039b9 <_Z32MethodPointerUpdateExampleTimersv+0x79>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  403996:	48 39 c6             	cmp    %rax,%rsi
  403999:	75 e5                	jne    403980 <_Z32MethodPointerUpdateExampleTimersv+0x40>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  40399b:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  4039a0:	be f8 56 40 00       	mov    $0x4056f8,%esi
  4039a5:	e8 56 12 00 00       	callq  404c00 <_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIIRKxEEEvDpOT_>
  4039aa:	83 eb 01             	sub    $0x1,%ebx
  4039ad:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  4039b2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4039b7:	75 dd                	jne    403996 <_Z32MethodPointerUpdateExampleTimersv+0x56>
  4039b9:	bb e8 03 00 00       	mov    $0x3e8,%ebx
  4039be:	48 8b 2d 4b 1e 00 00 	mov    0x1e4b(%rip),%rbp        # 405810 <_ZN14entity_hermite4typeE>
  4039c5:	eb 24                	jmp    4039eb <_Z32MethodPointerUpdateExampleTimersv+0xab>
  4039c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4039ce:	00 00 
  4039d0:	48 85 f6             	test   %rsi,%rsi
  4039d3:	74 03                	je     4039d8 <_Z32MethodPointerUpdateExampleTimersv+0x98>
  4039d5:	48 89 2e             	mov    %rbp,(%rsi)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  4039d8:	48 83 c6 08          	add    $0x8,%rsi
	{
		create_types.emplace_back(entity_lerp_fast::type);
	}
	for (int i = 0; i < number_of_hermite; i++)
  4039dc:	83 eb 01             	sub    $0x1,%ebx
  4039df:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  4039e4:	74 23                	je     403a09 <_Z32MethodPointerUpdateExampleTimersv+0xc9>
  4039e6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4039eb:	48 39 c6             	cmp    %rax,%rsi
  4039ee:	75 e0                	jne    4039d0 <_Z32MethodPointerUpdateExampleTimersv+0x90>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  4039f0:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  4039f5:	be 10 58 40 00       	mov    $0x405810,%esi
  4039fa:	e8 01 12 00 00       	callq  404c00 <_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIIRKxEEEvDpOT_>
  4039ff:	83 eb 01             	sub    $0x1,%ebx
  403a02:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  403a07:	75 dd                	jne    4039e6 <_Z32MethodPointerUpdateExampleTimersv+0xa6>
	{
		create_types.emplace_back(entity_hermite::type);
	}

	shuffle(create_types.begin(), create_types.end(), generator);
  403a09:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  403a0e:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  403a13:	e8 c8 15 00 00       	callq  404fe0 <_ZSt7shuffleIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEERSt26linear_congruential_engineImLm16807ELm0ELm2147483647EEEvT_SA_OT0_>
  403a18:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
  403a1d:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  403a22:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  403a29:	00 00 
  403a2b:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403a32:	00 00 
  403a34:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  403a3b:	00 00 

	vector<unique_ptr<entity>> entity_vec;
	for (auto &create_type : create_types)
  403a3d:	4c 39 e3             	cmp    %r12,%rbx
  403a40:	0f 84 81 03 00 00    	je     403dc7 <_Z32MethodPointerUpdateExampleTimersv+0x487>
  403a46:	0f 57 db             	xorps  %xmm3,%xmm3
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
	  if (__m)
	    __res %= __m;
  403a49:	48 bd 05 00 00 00 02 	movabs $0x200000005,%rbp
  403a50:	00 00 00 
  403a53:	f3 0f 11 5c 24 0c    	movss  %xmm3,0xc(%rsp)
  403a59:	e9 06 01 00 00       	jmpq   403b64 <_Z32MethodPointerUpdateExampleTimersv+0x224>
  403a5e:	66 90                	xchg   %ax,%ax
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403a60:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  403a65:	48 69 f0 a7 41 00 00 	imul   $0x41a7,%rax,%rsi
	  if (__m)
	    __res %= __m;
  403a6c:	48 89 f0             	mov    %rsi,%rax
  403a6f:	48 f7 e5             	mul    %rbp
  403a72:	48 89 f0             	mov    %rsi,%rax
  403a75:	48 29 d0             	sub    %rdx,%rax
  403a78:	48 d1 e8             	shr    %rax
  403a7b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  403a7f:	48 c1 e9 1e          	shr    $0x1e,%rcx
  403a83:	48 89 c8             	mov    %rcx,%rax
  403a86:	48 c1 e0 1f          	shl    $0x1f,%rax
  403a8a:	48 29 c8             	sub    %rcx,%rax
  403a8d:	48 89 f1             	mov    %rsi,%rcx
  403a90:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403a93:	48 69 f1 a7 41 00 00 	imul   $0x41a7,%rcx,%rsi
	  if (__m)
	    __res %= __m;
  403a9a:	48 89 f0             	mov    %rsi,%rax
  403a9d:	48 f7 e5             	mul    %rbp
  403aa0:	48 89 f0             	mov    %rsi,%rax
  403aa3:	48 29 d0             	sub    %rdx,%rax
  403aa6:	48 d1 e8             	shr    %rax
  403aa9:	48 01 c2             	add    %rax,%rdx
  403aac:	48 c1 ea 1e          	shr    $0x1e,%rdx
  403ab0:	48 89 d0             	mov    %rdx,%rax
  403ab3:	48 c1 e0 1f          	shl    $0x1f,%rax
  403ab7:	48 29 d0             	sub    %rdx,%rax
  403aba:	48 29 c6             	sub    %rax,%rsi
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403abd:	48 83 e9 01          	sub    $0x1,%rcx
  403ac1:	48 89 f2             	mov    %rsi,%rdx
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
  403ac4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  403ac9:	0f 88 51 02 00 00    	js     403d20 <_Z32MethodPointerUpdateExampleTimersv+0x3e0>
  403acf:	f3 48 0f 2a c9       	cvtsi2ss %rcx,%xmm1
  403ad4:	f3 0f 10 64 24 0c    	movss  0xc(%rsp),%xmm4
  403ada:	48 83 ea 01          	sub    $0x1,%rdx
  403ade:	f3 0f 58 cc          	addss  %xmm4,%xmm1
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403ae2:	f3 0f 59 0d e2 1d 00 	mulss  0x1de2(%rip),%xmm1        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403ae9:	00 
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
  403aea:	f3 0f 58 cc          	addss  %xmm4,%xmm1
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403aee:	0f 88 0c 02 00 00    	js     403d00 <_Z32MethodPointerUpdateExampleTimersv+0x3c0>
  403af4:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  403af9:	f3 0f 10 6c 24 0c    	movss  0xc(%rsp),%xmm5
  403aff:	f3 0f 58 c5          	addss  %xmm5,%xmm0
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403b03:	f3 0f 59 05 c1 1d 00 	mulss  0x1dc1(%rip),%xmm0        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403b0a:	00 
  403b0b:	f3 0f 58 c5          	addss  %xmm5,%xmm0
			unique_ptr<entity> a(create_entity_hermite(distribution(generator), distribution(generator), distribution(generator), distribution(generator)));
			entity_vec.emplace_back(std::move(a));
		}
		else
		{
			unique_ptr<entity> a(create_entity_lerp_fast(distribution(generator), distribution(generator)));
  403b0f:	e8 ac f3 ff ff       	callq  402ec0 <_Z23create_entity_lerp_fastff>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  403b14:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  403b19:	48 3b 54 24 60       	cmp    0x60(%rsp),%rdx
  403b1e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  403b23:	0f 84 87 02 00 00    	je     403db0 <_Z32MethodPointerUpdateExampleTimersv+0x470>
  403b29:	48 85 d2             	test   %rdx,%rdx
  403b2c:	0f 84 0e 02 00 00    	je     403d40 <_Z32MethodPointerUpdateExampleTimersv+0x400>
      // Modifiers.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
  403b32:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  403b39:	00 00 
  403b3b:	48 89 02             	mov    %rax,(%rdx)
  403b3e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  403b43:	48 83 c2 08          	add    $0x8,%rdx
  403b47:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)

      // Destructor.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
  403b4c:	48 85 ff             	test   %rdi,%rdi
  403b4f:	74 06                	je     403b57 <_Z32MethodPointerUpdateExampleTimersv+0x217>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
  403b51:	48 8b 07             	mov    (%rdi),%rax
  403b54:	ff 50 18             	callq  *0x18(%rax)
  403b57:	48 83 c3 08          	add    $0x8,%rbx
	}

	shuffle(create_types.begin(), create_types.end(), generator);

	vector<unique_ptr<entity>> entity_vec;
	for (auto &create_type : create_types)
  403b5b:	49 39 dc             	cmp    %rbx,%r12
  403b5e:	0f 84 6c 02 00 00    	je     403dd0 <_Z32MethodPointerUpdateExampleTimersv+0x490>
	{
		if (create_type == entity_hermite::type)
  403b64:	48 8b 05 a5 1c 00 00 	mov    0x1ca5(%rip),%rax        # 405810 <_ZN14entity_hermite4typeE>
  403b6b:	48 39 03             	cmp    %rax,(%rbx)
  403b6e:	0f 85 ec fe ff ff    	jne    403a60 <_Z32MethodPointerUpdateExampleTimersv+0x120>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403b74:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  403b79:	48 69 ca a7 41 00 00 	imul   $0x41a7,%rdx,%rcx
	  if (__m)
	    __res %= __m;
  403b80:	48 89 c8             	mov    %rcx,%rax
  403b83:	48 f7 e5             	mul    %rbp
  403b86:	48 89 c8             	mov    %rcx,%rax
  403b89:	48 29 d0             	sub    %rdx,%rax
  403b8c:	48 d1 e8             	shr    %rax
  403b8f:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
  403b93:	48 c1 ef 1e          	shr    $0x1e,%rdi
  403b97:	48 89 f8             	mov    %rdi,%rax
  403b9a:	48 c1 e0 1f          	shl    $0x1f,%rax
  403b9e:	48 29 f8             	sub    %rdi,%rax
  403ba1:	48 29 c1             	sub    %rax,%rcx
  403ba4:	48 89 cf             	mov    %rcx,%rdi
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403ba7:	48 69 c9 a7 41 00 00 	imul   $0x41a7,%rcx,%rcx
	  if (__m)
	    __res %= __m;
  403bae:	48 89 c8             	mov    %rcx,%rax
  403bb1:	48 f7 e5             	mul    %rbp
  403bb4:	48 89 c8             	mov    %rcx,%rax
  403bb7:	48 29 d0             	sub    %rdx,%rax
  403bba:	48 d1 e8             	shr    %rax
  403bbd:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  403bc1:	48 c1 ee 1e          	shr    $0x1e,%rsi
  403bc5:	48 89 f0             	mov    %rsi,%rax
  403bc8:	48 c1 e0 1f          	shl    $0x1f,%rax
  403bcc:	48 29 f0             	sub    %rsi,%rax
  403bcf:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403bd2:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
	  if (__m)
	    __res %= __m;
  403bd9:	48 89 ce             	mov    %rcx,%rsi
  403bdc:	4c 89 c0             	mov    %r8,%rax
  403bdf:	48 f7 e5             	mul    %rbp
  403be2:	4c 89 c0             	mov    %r8,%rax
  403be5:	48 29 d0             	sub    %rdx,%rax
  403be8:	48 d1 e8             	shr    %rax
  403beb:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  403bef:	48 c1 e9 1e          	shr    $0x1e,%rcx
  403bf3:	48 89 c8             	mov    %rcx,%rax
  403bf6:	48 c1 e0 1f          	shl    $0x1f,%rax
  403bfa:	48 29 c8             	sub    %rcx,%rax
  403bfd:	4c 89 c1             	mov    %r8,%rcx
  403c00:	48 29 c1             	sub    %rax,%rcx
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
	{
	  _Tp __res = __a * __x + __c;
  403c03:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
	  if (__m)
	    __res %= __m;
  403c0a:	4c 89 c0             	mov    %r8,%rax
  403c0d:	48 f7 e5             	mul    %rbp
  403c10:	4c 89 c0             	mov    %r8,%rax
  403c13:	48 29 d0             	sub    %rdx,%rax
  403c16:	48 d1 e8             	shr    %rax
  403c19:	48 01 c2             	add    %rax,%rdx
  403c1c:	48 c1 ea 1e          	shr    $0x1e,%rdx
  403c20:	48 89 d0             	mov    %rdx,%rax
  403c23:	48 c1 e0 1f          	shl    $0x1f,%rax
  403c27:	48 29 d0             	sub    %rdx,%rax
  403c2a:	4c 89 c2             	mov    %r8,%rdx
  403c2d:	48 29 c2             	sub    %rax,%rdx
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403c30:	48 83 ef 01          	sub    $0x1,%rdi
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
  403c34:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  403c39:	0f 88 23 01 00 00    	js     403d62 <_Z32MethodPointerUpdateExampleTimersv+0x422>
  403c3f:	f3 48 0f 2a df       	cvtsi2ss %rdi,%xmm3
  403c44:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  403c4a:	48 83 ee 01          	sub    $0x1,%rsi
  403c4e:	f3 0f 58 df          	addss  %xmm7,%xmm3
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403c52:	f3 0f 59 1d 72 1c 00 	mulss  0x1c72(%rip),%xmm3        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403c59:	00 
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
  403c5a:	f3 0f 58 df          	addss  %xmm7,%xmm3
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403c5e:	0f 88 32 01 00 00    	js     403d96 <_Z32MethodPointerUpdateExampleTimersv+0x456>
  403c64:	f3 48 0f 2a d6       	cvtsi2ss %rsi,%xmm2
  403c69:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  403c6f:	48 83 e9 01          	sub    $0x1,%rcx
  403c73:	f3 0f 58 d7          	addss  %xmm7,%xmm2
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403c77:	f3 0f 59 15 4d 1c 00 	mulss  0x1c4d(%rip),%xmm2        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403c7e:	00 
  403c7f:	f3 0f 58 d7          	addss  %xmm7,%xmm2
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403c83:	0f 88 f3 00 00 00    	js     403d7c <_Z32MethodPointerUpdateExampleTimersv+0x43c>
  403c89:	f3 48 0f 2a c9       	cvtsi2ss %rcx,%xmm1
  403c8e:	f3 0f 10 74 24 0c    	movss  0xc(%rsp),%xmm6
  403c94:	48 83 ea 01          	sub    $0x1,%rdx
  403c98:	f3 0f 58 ce          	addss  %xmm6,%xmm1
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403c9c:	f3 0f 59 0d 28 1c 00 	mulss  0x1c28(%rip),%xmm1        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403ca3:	00 
  403ca4:	f3 0f 58 ce          	addss  %xmm6,%xmm1
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403ca8:	0f 88 9a 00 00 00    	js     403d48 <_Z32MethodPointerUpdateExampleTimersv+0x408>
  403cae:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  403cb3:	f3 0f 10 7c 24 0c    	movss  0xc(%rsp),%xmm7
  403cb9:	f3 0f 58 c7          	addss  %xmm7,%xmm0
	  __tmp *= __r;
	}
      return __sum / __tmp;
  403cbd:	f3 0f 59 05 07 1c 00 	mulss  0x1c07(%rip),%xmm0        # 4058cc <_ZN14entity_hermite4typeE+0xbc>
  403cc4:	00 
  403cc5:	f3 0f 58 c7          	addss  %xmm7,%xmm0
		{
			unique_ptr<entity> a(create_entity_hermite(distribution(generator), distribution(generator), distribution(generator), distribution(generator)));
  403cc9:	e8 02 f5 ff ff       	callq  4031d0 <_Z21create_entity_hermiteffff>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  403cce:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  403cd3:	48 3b 54 24 60       	cmp    0x60(%rsp),%rdx
  403cd8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  403cdd:	0f 85 46 fe ff ff    	jne    403b29 <_Z32MethodPointerUpdateExampleTimersv+0x1e9>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  403ce3:	4c 8d 6c 24 50       	lea    0x50(%rsp),%r13
  403ce8:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  403ced:	4c 89 ef             	mov    %r13,%rdi
  403cf0:	e8 cb 14 00 00       	callq  4051c0 <_ZNSt6vectorISt10unique_ptrI6entitySt14default_deleteIS1_EESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_>
  403cf5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  403cfa:	e9 4d fe ff ff       	jmpq   403b4c <_Z32MethodPointerUpdateExampleTimersv+0x20c>
  403cff:	90                   	nop
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
  403d00:	48 89 d0             	mov    %rdx,%rax
  403d03:	83 e2 01             	and    $0x1,%edx
  403d06:	48 d1 e8             	shr    %rax
  403d09:	48 09 d0             	or     %rdx,%rax
  403d0c:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  403d11:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  403d15:	e9 df fd ff ff       	jmpq   403af9 <_Z32MethodPointerUpdateExampleTimersv+0x1b9>
  403d1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403d20:	48 89 c8             	mov    %rcx,%rax
  403d23:	83 e1 01             	and    $0x1,%ecx
  403d26:	48 d1 e8             	shr    %rax
  403d29:	48 09 c8             	or     %rcx,%rax
  403d2c:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
  403d31:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  403d35:	e9 9a fd ff ff       	jmpq   403ad4 <_Z32MethodPointerUpdateExampleTimersv+0x194>
  403d3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403d40:	48 89 c7             	mov    %rax,%rdi
  403d43:	e9 fb fd ff ff       	jmpq   403b43 <_Z32MethodPointerUpdateExampleTimersv+0x203>
  403d48:	48 89 d0             	mov    %rdx,%rax
  403d4b:	83 e2 01             	and    $0x1,%edx
  403d4e:	48 d1 e8             	shr    %rax
  403d51:	48 09 d0             	or     %rdx,%rax
  403d54:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  403d59:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  403d5d:	e9 51 ff ff ff       	jmpq   403cb3 <_Z32MethodPointerUpdateExampleTimersv+0x373>
  403d62:	48 89 f8             	mov    %rdi,%rax
  403d65:	83 e7 01             	and    $0x1,%edi
  403d68:	48 d1 e8             	shr    %rax
  403d6b:	48 09 f8             	or     %rdi,%rax
  403d6e:	f3 48 0f 2a d8       	cvtsi2ss %rax,%xmm3
  403d73:	f3 0f 58 db          	addss  %xmm3,%xmm3
  403d77:	e9 c8 fe ff ff       	jmpq   403c44 <_Z32MethodPointerUpdateExampleTimersv+0x304>
  403d7c:	48 89 c8             	mov    %rcx,%rax
  403d7f:	83 e1 01             	and    $0x1,%ecx
  403d82:	48 d1 e8             	shr    %rax
  403d85:	48 09 c8             	or     %rcx,%rax
  403d88:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
  403d8d:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  403d91:	e9 f8 fe ff ff       	jmpq   403c8e <_Z32MethodPointerUpdateExampleTimersv+0x34e>
  403d96:	48 89 f0             	mov    %rsi,%rax
  403d99:	83 e6 01             	and    $0x1,%esi
  403d9c:	48 d1 e8             	shr    %rax
  403d9f:	48 09 f0             	or     %rsi,%rax
  403da2:	f3 48 0f 2a d0       	cvtsi2ss %rax,%xmm2
  403da7:	f3 0f 58 d2          	addss  %xmm2,%xmm2
  403dab:	e9 b9 fe ff ff       	jmpq   403c69 <_Z32MethodPointerUpdateExampleTimersv+0x329>
  403db0:	4c 8d 6c 24 50       	lea    0x50(%rsp),%r13
  403db5:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  403dba:	4c 89 ef             	mov    %r13,%rdi
  403dbd:	e8 fe 13 00 00       	callq  4051c0 <_ZNSt6vectorISt10unique_ptrI6entitySt14default_deleteIS1_EESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_>
  403dc2:	e9 2e ff ff ff       	jmpq   403cf5 <_Z32MethodPointerUpdateExampleTimersv+0x3b5>
  403dc7:	0f 57 d2             	xorps  %xmm2,%xmm2
  403dca:	f3 0f 11 54 24 0c    	movss  %xmm2,0xc(%rsp)
public:
	std::chrono::time_point<std::chrono::high_resolution_clock> m_start;
	std::chrono::time_point<std::chrono::high_resolution_clock> m_end;
	mytimer()
	{
		m_start = std::chrono::high_resolution_clock::now();
  403dd0:	e8 bb e7 ff ff       	callq  402590 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
  403dd5:	41 bc 14 00 00 00    	mov    $0x14,%r12d
  403ddb:	49 89 c5             	mov    %rax,%r13
  403dde:	66 90                	xchg   %ax,%ax
  403de0:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
  403de5:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
		// The GCC extention looks like you can do this. 
		memfun mf = &entity::Update;

		as_normfun snf = (as_normfun)(&entity_lerp_fast_impl::Update);
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
			for (auto &a : entity_vec) {
  403dea:	48 39 eb             	cmp    %rbp,%rbx
  403ded:	74 24                	je     403e13 <_Z32MethodPointerUpdateExampleTimersv+0x4d3>
  403def:	90                   	nop
	return get();
      }

      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
  403df0:	48 8b 3b             	mov    (%rbx),%rdi
				
				const entity& e = *(&(*a)); 

				as_normfun dnf = (as_normfun)(e.*mf);
  403df3:	48 8b 07             	mov    (%rdi),%rax
  403df6:	48 8b 10             	mov    (%rax),%rdx
				// if we have a fast loop for this object don't update
				// so in this case we on the hermite entity but not the lerp ones. 
				if (snf != dnf) {
  403df9:	48 81 fa 80 2c 40 00 	cmp    $0x402c80,%rdx
  403e00:	74 08                	je     403e0a <_Z32MethodPointerUpdateExampleTimersv+0x4ca>
					a->Update(t);
  403e02:	f3 0f 10 44 24 0c    	movss  0xc(%rsp),%xmm0
  403e08:	ff d2                	callq  *%rdx
  403e0a:	48 83 c3 08          	add    $0x8,%rbx
		// The GCC extention looks like you can do this. 
		memfun mf = &entity::Update;

		as_normfun snf = (as_normfun)(&entity_lerp_fast_impl::Update);
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
			for (auto &a : entity_vec) {
  403e0e:	48 39 dd             	cmp    %rbx,%rbp
  403e11:	75 dd                	jne    403df0 <_Z32MethodPointerUpdateExampleTimersv+0x4b0>
				if (snf != dnf) {
					a->Update(t);
				}
			}
			// fast loop with no virtual functions and maybe a different data format. 
			entity_lerp_fast::UpdateAll(t);
  403e13:	f3 0f 10 44 24 0c    	movss  0xc(%rsp),%xmm0
  403e19:	e8 42 ef ff ff       	callq  402d60 <_ZN16entity_lerp_fast9UpdateAllEf>
		// create a member function that points to update function that I have a fast loop for 
		// The GCC extention looks like you can do this. 
		memfun mf = &entity::Update;

		as_normfun snf = (as_normfun)(&entity_lerp_fast_impl::Update);
		for (float t = 0.0f; t < 1.0; t += 0.05f) {
  403e1e:	f3 0f 10 35 a2 1a 00 	movss  0x1aa2(%rip),%xmm6        # 4058c8 <_ZN14entity_hermite4typeE+0xb8>
  403e25:	00 
  403e26:	41 83 ec 01          	sub    $0x1,%r12d
  403e2a:	f3 0f 58 74 24 0c    	addss  0xc(%rsp),%xmm6
  403e30:	f3 0f 11 74 24 0c    	movss  %xmm6,0xc(%rsp)
  403e36:	75 a8                	jne    403de0 <_Z32MethodPointerUpdateExampleTimersv+0x4a0>
	{
		m_start = std::chrono::high_resolution_clock::now();
	}
	std::chrono::duration<double> stop()
	{
		m_end = std::chrono::high_resolution_clock::now();
  403e38:	e8 53 e7 ff ff       	callq  402590 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  403e3d:	4c 29 e8             	sub    %r13,%rax
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
  403e40:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  403e45:	48 8b 05 7c 34 20 00 	mov    0x20347c(%rip),%rax        # 6072c8 <gMethodPointerUpdateExampleTimers+0x8>
  403e4c:	48 3b 05 7d 34 20 00 	cmp    0x20347d(%rip),%rax        # 6072d0 <gMethodPointerUpdateExampleTimers+0x10>
  403e53:	f2 0f 5e 05 65 1a 00 	divsd  0x1a65(%rip),%xmm0        # 4058c0 <_ZN14entity_hermite4typeE+0xb0>
  403e5a:	00 
				}
			}
			// fast loop with no virtual functions and maybe a different data format. 
			entity_lerp_fast::UpdateAll(t);
		}
		gMethodPointerUpdateExampleTimers.emplace_back(timer.stop());
  403e5b:	f2 0f 11 44 24 20    	movsd  %xmm0,0x20(%rsp)
  403e61:	74 74                	je     403ed7 <_Z32MethodPointerUpdateExampleTimersv+0x597>
  403e63:	48 85 c0             	test   %rax,%rax
  403e66:	74 0c                	je     403e74 <_Z32MethodPointerUpdateExampleTimersv+0x534>
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
  403e68:	f2 0f 59 05 48 1a 00 	mulsd  0x1a48(%rip),%xmm0        # 4058b8 <_ZN14entity_hermite4typeE+0xa8>
  403e6f:	00 
	template<typename _Rep2, typename _Period2, typename = typename
	       enable_if<treat_as_floating_point<rep>::value
			 || (ratio_divide<_Period2, period>::den == 1
			     && !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
	  : __r(duration_cast<duration>(__d).count()) { }
  403e70:	f2 0f 11 00          	movsd  %xmm0,(%rax)
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  403e74:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
  403e79:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  403e7e:	48 83 c0 08          	add    $0x8,%rax
  403e82:	48 89 05 3f 34 20 00 	mov    %rax,0x20343f(%rip)        # 6072c8 <gMethodPointerUpdateExampleTimers+0x8>
  403e89:	48 39 dd             	cmp    %rbx,%rbp
  403e8c:	74 67                	je     403ef5 <_Z32MethodPointerUpdateExampleTimersv+0x5b5>
  403e8e:	66 90                	xchg   %ax,%ax

      // Destructor.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
  403e90:	48 8b 3b             	mov    (%rbx),%rdi
  403e93:	48 85 ff             	test   %rdi,%rdi
  403e96:	74 06                	je     403e9e <_Z32MethodPointerUpdateExampleTimersv+0x55e>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
  403e98:	48 8b 07             	mov    (%rdi),%rax
  403e9b:	ff 50 18             	callq  *0x18(%rax)
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
  403e9e:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  403ea5:	48 83 c3 08          	add    $0x8,%rbx
  403ea9:	48 39 dd             	cmp    %rbx,%rbp
  403eac:	75 e2                	jne    403e90 <_Z32MethodPointerUpdateExampleTimersv+0x550>
  403eae:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	if (__p)
  403eb3:	48 85 ff             	test   %rdi,%rdi
  403eb6:	74 05                	je     403ebd <_Z32MethodPointerUpdateExampleTimersv+0x57d>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
  403eb8:	e8 93 e6 ff ff       	callq  402550 <_ZdlPv@plt>
      }
#endif

